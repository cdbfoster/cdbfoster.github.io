var searchIndex = {};
searchIndex["zero_sum"] = {"doc":"An analysis engine for zero-sum games.","items":[[0,"analysis","zero_sum","Contains the traits and tools to provide analysis of zero-sum games.",null,null],[0,"search","zero_sum::analysis","Tools for searching the game tree.",null,null],[3,"Analysis","zero_sum::analysis::search","The result of a search.",null,null],[12,"state","","A reference to the state on which the search was performed.",0,null],[12,"evaluation","","The evaluation of the state after applying the principal variation.",0,null],[12,"principal_variation","","The principal variation of the state.",0,null],[12,"stats","","Optional statistics from the search may be available for printing.",0,null],[3,"PvSearch","","A PVS implementation of `Search` with a few common optimizations.",null,null],[11,"new","","Creates a `PvSearch` without a target depth or time goal.  It will search until\nit finds a favorable resolution, or until the search is interrupted.",1,{"inputs":[],"output":{"name":"pvsearch"}}],[11,"with_depth","","Creates a `PvSearch` that will search to a maximum depth of `depth`.",1,{"inputs":[{"name":"u8"}],"output":{"name":"pvsearch"}}],[11,"with_goal","","Creates a `PvSearch` that will search until it predicts that it will exceed\n`goal` seconds with the next depth.  `branching_factor` is used to predict\nthe required time to search at the next depth.",1,{"inputs":[{"name":"u16"},{"name":"f32"}],"output":{"name":"pvsearch"}}],[11,"search","","",1,null],[8,"Search","","Provides search capabilities",null,null],[10,"search","","Generates an analysis of `state`.  `interrupt` is optionally provided to interrupt long searches.",2,null],[11,"fmt","","",0,null],[8,"Evaluatable","zero_sum::analysis","Provides evaluation capabilities.",null,null],[10,"evaluate","","Returns the evaluation of the current state.",3,null],[11,"evaluate_plies","","Returns the evaluation of the state after executing `plies`.",3,null],[8,"Evaluation","","An evaluation type.",null,null],[10,"null","","An empty, or zero evaluation.",4,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","The smallest step to consider.",4,{"inputs":[],"output":{"name":"self"}}],[10,"win","","The base value of a win.  The evaluation system may add or subtract to it in\nin order to promote it or discourage it in favor of others in the search.",4,{"inputs":[],"output":{"name":"self"}}],[10,"max","","The maximum value representable.  This must be safely negatable.",4,{"inputs":[],"output":{"name":"self"}}],[10,"is_win","","Returns `true` if this evaluation contains a win.  This is usually a check to\nsee if the absolute value is above a certain threshold.",4,null],[8,"Extrapolatable","","Provides the possible plies from a given state.",null,null],[10,"extrapolate","","Returns a list of plies that should be considered from the current state.  The search\nsystem does not assume that all plies returned are correct.",5,null],[0,"impls","zero_sum","Contains implementations of the library for a few zero-sum games.",null,null],[0,"tak","zero_sum::impls","The game of [tak](http://cheapass.com/tak/).",null,null],[3,"Evaluation","zero_sum::impls::tak","Represents the evaluation of a state.",null,null],[12,"0","","",6,null],[3,"State","","The state of the game.",null,null],[12,"p1_flatstones","","Player 1&#39;s remaining flatstones.",7,null],[12,"p1_capstones","","Player 1&#39;s remaining capstones.",7,null],[12,"p2_flatstones","","Player 2&#39;s remaining flatstones.",7,null],[12,"p2_capstones","","Player 2&#39;s remaining capstones.",7,null],[12,"board","","The board of pieces.",7,null],[12,"ply_count","","The number of half-moves passed since the start.",7,null],[4,"Color","","The colors of the players.",null,null],[13,"White","","",8,null],[13,"Black","","",8,null],[4,"Piece","","The types of pieces.",null,null],[13,"Flatstone","","",9,null],[13,"StandingStone","","",9,null],[13,"Capstone","","",9,null],[4,"Direction","","The slidable directions.",null,null],[13,"North","","",10,null],[13,"East","","",10,null],[13,"South","","",10,null],[13,"West","","",10,null],[4,"Ply","","Represents either a piece placement or a slide.",null,null],[13,"Place","","Placement of a stone in an empty space.",11,null],[12,"x","zero_sum::impls::tak::Ply","",11,null],[12,"y","","",11,null],[12,"piece","","",11,null],[13,"Slide","zero_sum::impls::tak","Slide of a stone or stack of stones already on the board.",11,null],[12,"x","zero_sum::impls::tak::Ply","",11,null],[12,"y","","",11,null],[12,"direction","","",11,null],[12,"drops","","",11,null],[4,"Resolution","zero_sum::impls::tak","The ways a game can end.",null,null],[13,"Road","","One player has completed a road.",12,null],[13,"Flat","","A player has run out of stones or the board is completely full,\nand one player has more flatstones.",12,null],[13,"Draw","","A player has run out of stones or the board is completely full,\nand neither player has more flatstones.",12,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"from_ptn","","",11,{"inputs":[{"name":"str"},{"name":"color"}],"output":{"name":"option"}}],[11,"to_ptn","","",11,null],[11,"fmt","","",11,null],[11,"hash","","",11,null],[11,"is_win","","Returns true if the value is either a `Road` or a `Flat`; false otherwise.",12,null],[11,"is_draw","","Returns true if the value is a `Draw`.",12,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"mul","","",6,null],[11,"div","","",6,null],[11,"neg","","",6,null],[11,"fmt","","",6,null],[11,"null","","",6,{"inputs":[],"output":{"name":"evaluation"}}],[11,"epsilon","","",6,{"inputs":[],"output":{"name":"evaluation"}}],[11,"win","","",6,{"inputs":[],"output":{"name":"evaluation"}}],[11,"max","","",6,{"inputs":[],"output":{"name":"evaluation"}}],[11,"is_win","","",6,null],[11,"evaluate","","",7,null],[11,"extrapolate","","",7,null],[11,"execute_ply_preallocated","","",7,null],[11,"check_resolution","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"new","","Creates a blank state of the specified board size.",7,{"inputs":[{"name":"usize"}],"output":{"name":"state"}}],[11,"from_tps","","Creates a state from a string in TPS format, i.e. `&quot;[TPS \\&quot;x5/x5/x5/x5/x5 1 1\\&quot;]&quot;`.",7,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",7,null],[11,"clone_from","","",7,null],[11,"hash","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"hash","","",8,null],[11,"eq","","",8,null],[11,"flip","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"get_color","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"to_offset","","",10,null],[0,"tic_tac_toe","zero_sum::impls","The game of tic-tac-toe.",null,null],[3,"Ply","zero_sum::impls::tic_tac_toe","The placement of a mark in an empty space.",null,null],[12,"mark","","",13,null],[12,"coordinates","","",13,null],[3,"Board","","The 3x3 game board.",null,null],[12,"0","","",14,null],[12,"1","","",14,null],[3,"Evaluation","","The evaluation of a board.",null,null],[12,"0","","",15,null],[4,"Mark","","Either X or O.",null,null],[13,"X","","",16,null],[13,"O","","",16,null],[4,"Resolution","","Either a win or a cat&#39;s game.",null,null],[13,"Win","","",17,null],[13,"CatsGame","","",17,null],[11,"fmt","","",16,null],[11,"fmt","","",13,null],[11,"fmt","","",14,null],[11,"is_win","","",17,null],[11,"is_draw","","",17,null],[11,"execute_ply_preallocated","","",14,null],[11,"check_resolution","","",14,null],[11,"extrapolate","","",14,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"partial_cmp","","",15,null],[11,"lt","","",15,null],[11,"le","","",15,null],[11,"gt","","",15,null],[11,"ge","","",15,null],[11,"add","","",15,null],[11,"sub","","",15,null],[11,"mul","","",15,null],[11,"div","","",15,null],[11,"neg","","",15,null],[11,"fmt","","",15,null],[11,"null","","",15,{"inputs":[],"output":{"name":"evaluation"}}],[11,"epsilon","","",15,{"inputs":[],"output":{"name":"evaluation"}}],[11,"win","","",15,{"inputs":[],"output":{"name":"evaluation"}}],[11,"max","","",15,{"inputs":[],"output":{"name":"evaluation"}}],[11,"is_win","","",15,null],[11,"evaluate","","",14,null],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"hash","","",16,null],[11,"eq","","",16,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"hash","","",13,null],[11,"fmt","","",17,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"new","","Creates an empty board.",14,{"inputs":[],"output":{"name":"board"}}],[11,"next_mark","","Returns the mark that will make the next move.",14,null],[11,"hash","","",14,null],[8,"Ply","zero_sum","This trait marks a ply.",null,null],[8,"Resolution","","A game&#39;s resolution.",null,null],[10,"is_win","","",18,null],[10,"is_draw","","",18,null],[8,"State","","The state of the game.",null,null],[10,"execute_ply_preallocated","","Executes a ply on the state, storing the resultant state in the preallocated `next`.\nIt is recommended to implement `Clone` on the `State` implementor manually,\nto take advantage of `Clone`&#39;s `clone_from` method in order to avoid costly\nallocations during a speed-critical search.",19,null],[10,"check_resolution","","Returns `None` if the game has not reached a conclusion.",19,null],[11,"execute_ply","","Clones the state and then calls `execute_ply_preallocated`.",19,null],[11,"execute_plies","","Executes each ply in `plies` on the result of the previous ply.",19,null],[14,"prepare_evaluation_tuple","","Implement arithmetic operators (`Add`, `Sub`, `Mul`, `Neg`, `Div`) and `Display` for a tuple\nstruct in terms of the enclosed type.",null,null],[11,"evaluate_plies","zero_sum::analysis","Returns the evaluation of the state after executing `plies`.",3,null],[11,"execute_ply","zero_sum","Clones the state and then calls `execute_ply_preallocated`.",19,null],[11,"execute_plies","","Executes each ply in `plies` on the result of the previous ply.",19,null]],"paths":[[3,"Analysis"],[3,"PvSearch"],[8,"Search"],[8,"Evaluatable"],[8,"Evaluation"],[8,"Extrapolatable"],[3,"Evaluation"],[3,"State"],[4,"Color"],[4,"Piece"],[4,"Direction"],[4,"Ply"],[4,"Resolution"],[3,"Ply"],[3,"Board"],[3,"Evaluation"],[4,"Mark"],[4,"Resolution"],[8,"Resolution"],[8,"State"]]};
initSearch(searchIndex);
